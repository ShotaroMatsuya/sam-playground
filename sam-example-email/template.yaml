AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-example-email

  Sample SAM Template for sam-example-email

Parameters:
  MailAddress:
    Type: String
  MailTableName:
    Type: String
    Default: 'mailaddress'
  BucketName:
    Type: String
    Default: 'mailbody-smat710'

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        MAILADDRESS: !Ref MailAddress
        MAILTABLE: !Ref MailTable
        QUEUENAME: !GetAtt SendQueue.QueueName

Resources:
  S3Mailbody:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref BucketName
  MailTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Ref MailTableName
      # email列がkey
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: haserror
          AttributeType: N
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3
      # haserrorをグローバルセカンダリインデックスとする
      GlobalSecondaryIndexes:
        - IndexName: haserror-index
          KeySchema:
            - AttributeName: haserror
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3
  SendQueue:
    Type: AWS::SQS::Queue
  BounceTopic:
    Type: AWS::SNS::Topic

  # S3 → Lambda →SQS
  SendqueueFunction:
    Type: AWS::Serverless::Function
    DeletionPolicy: Retain
    Properties:
      CodeUri: send_queue/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
        # DynamoDBテーブルへのCRUD権限
        - DynamoDBCrudPolicy:
            TableName: !Ref MailTable
        # queueへの送信権限
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SendQueue.QueueName
      Events:
        BodyUploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref S3Mailbody
            Events: s3:ObjectCreated:*

  # SQS → Lambda → SES
  SendmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: send_mail/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
        # DynamoDBテーブルへのCRUD権限
        - DynamoDBCrudPolicy:
            TableName: !Ref MailTable
        # S3バケットへの読み込みアクセス権限
        - S3ReadPolicy:
            BucketName: !Ref S3Mailbody
        # SESを用いたメール送信
        - SESCrudPolicy:
            IdentityName: !Ref MailAddress
      Events:
        SendmailEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SendQueue.Arn
            BatchSize: 10
  # SNS → Lambda → DynamoDB
  BounceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bounce/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
        # DynamoDBテーブルへのCRUD権限
        - DynamoDBCrudPolicy:
            TableName: !Ref MailTable
      Events:
        BounceEvent:
          Type: SNS
          Properties:
            Topic: !Ref BounceTopic

Outputs:
  # S3のARN
  S3MailBodyArn:
    Value: !GetAtt S3Mailbody.Arn
  # SQSのARN
  SendQueueArn:
    Value: !GetAtt SendQueue.Arn
  # SNSのARN
  BounceTopicArn:
    Value: !Ref BounceTopic
  # テーブル名
  MailTableName:
    Value: !Ref MailTable
